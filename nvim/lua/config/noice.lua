-- require("noice").setup({
--   lsp = {
--     -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
--     override = {
--       ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
--       ["vim.lsp.util.stylize_markdown"] = true,
--       ["cmp.entry.get_documentation"] = true,
--     },
--   },
--   -- you can enable a preset for easier configuration
--   presets = {
--     bottom_search = true,         -- use a classic bottom cmdline for search
--     command_palette = true,       -- position the cmdline and popupmenu together
--     long_message_to_split = true, -- long messages will be sent to a split
--     inc_rename = false,           -- enables an input dialog for inc-rename.nvim
--     lsp_doc_border = false,       -- add a border to hover docs and signature help
--   },
-- })
--
-- -- redirect ":hi"
-- -- redirect some function
-- vim.keymap.set("c", "<S-Enter>", function()
--   require("noice").redirect(vim.fn.getcmdline())
-- end, { desc = "Redirect Cmdline" })
--
-- vim.keymap.set("n", "<leader>nt", function()
--   require("noice").cmd("telescope")
-- end, { desc = "[Noice] [T]elescope" })
--
-- vim.keymap.set("n", "<leader>nh", function()
--   require("noice").cmd("history")
-- end, { desc = "[Noice] [H]istory" })
--
-- vim.keymap.set("n", "<leader>nd", function()
--   require("noice").cmd("dismiss")
-- end, { desc = "[Noice] [D]ismiss" })
--
--
-- -- vim.keymap.set("n", "<leader>nc", function()
-- --   require("noice").cmd("disable")
-- -- end, { desc = "[Noice] [C]lear" })
--
-- -- in order to show recording macro
-- require("lualine").setup({
--   sections = {
--     lualine_x = {
--       {
--         require("noice").api.statusline.mode.get,
--         cond = require("noice").api.statusline.mode.has,
--         color = { fg = "#ff9e64" },
--       }
--     },
--   },
-- })
